# Add a small constant to I to avoid -Inf values and prepare the data for geom_rect()
Data$log_I <- ifelse(Data$I > 0, log(Data$I), NA)
# Define the start and end of each time interval
Data <- Data %>%
mutate(xmin = DateTime,
xmax = lead(DateTime, default = DateTime[length(DateTime)]))
p <- ggplot(Data, aes(x = DateTime)) +
# Replace geom_tile with geom_rect and use xmin and xmax for continuous tiles
geom_rect(aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf, fill = log_I)) +
scale_fill_gradient(low = "darkgrey", high = "white", name = "log(PAR)") + # Adjust colors as needed
# Add lines for Measured DO and Equilibrium DO with distinct line types
geom_line(aes(y = ODO_mg_L, color = "Measured DO", linetype = "Measured DO"), linewidth = 0.8) +
geom_line(aes(y = ODO_eq_mg_L, color = "Equilibrium DO", linetype = "Equilibrium DO"), linewidth = 0.8) +
# Labels and title
labs(title = "Time Series Plot of Measured and Equilibrium DO",
x = "DateTime",
y = "Values (mg/L)",
color = "Legend",
linetype = "Linetype",
fill = "Log(PAR)") +
# Custom colors for DO lines
scale_color_manual(values = c("Measured DO" = "#4DADCF", "Equilibrium DO" = "coral1")) +
# Theme settings
theme_minimal() +
theme(plot.title = element_text(size = 20),    # Adjust the size of the plot title
axis.title.x = element_text(size = 16),  # Adjust the size of the x-axis title
axis.title.y = element_text(size = 16),  # Adjust the size of the y-axis title
axis.text.x = element_text(size = 16),   # Adjust the size of the x-axis text
axis.text.y = element_text(size = 16))   # Adjust the size of the y-axis text
# Save the plot
#ggsave("measure_vs_equ.jpg", plot = p, width = 750*4, height = 600*4, units = "px")
print(p)
# Add equilibrium DO calculation
Data$ODO_eq_mg_L <- Data$ODO_mg_L / Data$ODO_per_local * 100
# Define start and end of each time interval for geom_rect()
Data <- Data %>%
mutate(xmin = DateTime,
xmax = lead(DateTime, default = DateTime[length(DateTime)]),
log_I = ifelse(I > 0, log(I), NA))
# Plot with combined color and linetype legend
p <- ggplot(Data, aes(x = DateTime)) +
# Replace geom_tile with geom_rect to avoid white lines
geom_rect(aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf, fill = log_I)) +
scale_fill_gradient(low = "darkgrey", high = "white", name = "log(PAR)") +
# Combine color and linetype into a single aesthetic for legend
geom_line(aes(y = ODO_mg_L, color = "Measured DO", linetype = "Measured DO"), linewidth = 0.8) +
geom_line(aes(y = ODO_eq_mg_L, color = "Equilibrium DO", linetype = "Equilibrium DO"), linewidth = 0.8) +
# Labels and title
labs(title = "Time Series Plot of Measured and Equilibrium DO",
x = "DateTime",
y = "Values (mg/L)",
color = "Legend",
linetype = "Legend",
fill = "Log(PAR)") +
# Custom colors and line types for combined legend
scale_color_manual(values = c("Measured DO" = "#4DADCF", "Equilibrium DO" = "coral1")) +
scale_linetype_manual(values = c("Measured DO" = "dashed", "Equilibrium DO" = "solid")) +
# Theme settings
theme_minimal() +
theme(plot.title = element_text(size = 20),    # Adjust the size of the plot title
axis.title.x = element_text(size = 16),  # Adjust the size of the x-axis title
axis.title.y = element_text(size = 16),  # Adjust the size of the y-axis title
axis.text.x = element_text(size = 16),   # Adjust the size of the x-axis text
axis.text.y = element_text(size = 16))   # Adjust the size of the y-axis text
# Save the plot
ggsave("measure_vs_equ.jpg", plot = p, width = 750*4, height = 600*4, units = "px")
print(p)
# Add equilibrium DO calculation
Data$ODO_eq_mg_L <- Data$ODO_mg_L / Data$ODO_per_local * 100
# Define start and end of each time interval for geom_rect()
Data <- Data %>%
mutate(xmin = DateTime,
xmax = lead(DateTime, default = DateTime[length(DateTime)]),
log_I = ifelse(I > 0, log(I), NA))
# Plot with combined color and linetype legend
p <- ggplot(Data, aes(x = DateTime)) +
# Replace geom_tile with geom_rect to avoid white lines
geom_rect(aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf, fill = log_I)) +
scale_fill_gradient(low = "darkgrey", high = "white", name = "log(PAR)") +
# Combine color and linetype into a single aesthetic for legend
geom_line(aes(y = ODO_mg_L, color = "Measured DO", linetype = "Measured DO"), linewidth = 0.8) +
geom_line(aes(y = ODO_eq_mg_L, color = "Equilibrium DO", linetype = "Equilibrium DO"), linewidth = 0.8) +
# Labels and title
labs(y = "Values (mg/L)",
color = "Legend",
linetype = "Legend",
fill = "Log(PAR)") +
# Custom colors and line types for combined legend
scale_color_manual(values = c("Measured DO" = "#4DADCF", "Equilibrium DO" = "coral1")) +
scale_linetype_manual(values = c("Measured DO" = "dashed", "Equilibrium DO" = "solid")) +
# Theme settings
theme_minimal() +
theme(plot.title = element_text(size = 20),    # Adjust the size of the plot title
axis.title.x = element_text(size = 16),  # Adjust the size of the x-axis title
axis.title.y = element_text(size = 16),  # Adjust the size of the y-axis title
axis.text.x = element_text(size = 16),   # Adjust the size of the x-axis text
axis.text.y = element_text(size = 16))   # Adjust the size of the y-axis text
# Save the plot
ggsave("measure_vs_equ.jpg", plot = p, width = 750*4, height = 600*4, units = "px")
print(p)
knitr::opts_chunk$set(echo = TRUE)
if (!require("pacman"))
install.packages("pacman")
pacman::p_load(tidyverse, skimr)
# Load necessary libraries
library(ggplot2)
library(lubridate)
# Load ggpattern
library(ggpattern)
DO_magnitude_box <- ggplot(data, aes(x = Season, y = DO_Magnitude, fill = Site, pattern = Site)) +
geom_boxplot_pattern(aes(pattern_fill = Site, pattern = Site),
position = position_dodge(0.8), color = "black",
pattern_density = 0.1, pattern_spacing = 0.05) +  # Boxplot with pattern dodging
geom_dotplot(binaxis = 'y', stackdir = 'center', binwidth = 0.1,
position = position_dodge(0.8)) +  # Dotplot with dodging
labs(y = "DO Amplitude (mg L-1)", fill = "Site", pattern = "Pattern") +  # Title for the legend
scale_fill_manual(values = c("Site1" = "#4DADCF", "Site2" = "coral1")) +  # Colors for Site1 and Site2
scale_pattern_manual(values = c("Site1" = "stripe", "Site2" = "none")) +  # Pattern for Site1, none for Site2
scale_pattern_fill_manual(values = c("Site1" = "#4DADCF", "Site2" = "coral1")) +  # Fill colors for pattern
theme_bw() +
theme(plot.title = element_text(size = 20),   # Adjust the size of the plot title
axis.title.x = element_text(size = 18), # Adjust the size of the x-axis title
axis.title.y = element_text(size = 18), # Adjust the size of the y-axis title
axis.text.x = element_text(size = 16),  # Adjust the size of the x-axis text
axis.text.y = element_text(size = 16),
legend.title = element_text(size = 16), # Adjust font size of legend title
legend.text = element_text(size = 14)) +  # Adjust font size of legend text
theme(axis.title.x = element_blank())  # Remove x-axis title
knitr::opts_chunk$set(echo = TRUE)
if (!require("pacman"))
install.packages("pacman")
pacman::p_load(tidyverse, skimr)
# Load necessary libraries
library(ggplot2)
library(lubridate)
data <- read.csv("C:/Users/DELL/Desktop/plot_update/dissolved_oxygen/Daily_DO_Temp_Magnitudes.csv")
data$Season <- factor(data$Season, levels = c("Spring", "Summer", "Fall", "Winter"))
# time series plot for DO_magnitude
DO_magnitude_series <- ggplot(data, aes(x=Month, y=DO_Magnitude, color=Season)) +
geom_point() +
labs(title="Time Series for DO magnitude",
x="Month",
y="DO amplitude (mg L-1)") +
scale_color_manual(values=c("Winter"="#4DADCF", "Summer"= "coral1","Fall"="#E9943A", "Spring"="#5EC795")) +
theme_minimal()
DO_magnitude_series
# time series plot for DO_Minimum
DO_Minimum_series <- ggplot(data, aes(x=Month, y=Min_DO)) +
geom_point() +
labs(title="Time Series for Minimum DO",
x="Month",
y="Minimum DO (mg L-1)") +
theme_minimal()
DO_Minimum_series
DO_magnitude_box <- ggplot(data, aes(x = Season, y = DO_Magnitude, fill = Site)) +
geom_boxplot(position = position_dodge(0.8)) +  # Position to dodge the boxes
geom_dotplot(binaxis='y', stackdir='center', binwidth=0.1, position = position_dodge(0.8)) +  # Dotplot with dodging
labs(y = "DO Amplitude (mg L-1)",
fill = "Site") +  # Title for the legend indicating Site 1 and Site 2
scale_fill_manual(values=c("Site1"="#4DADCF", "Site2"="coral1")) +
theme_bw() +
theme(plot.title = element_text(size = 20), # Adjust the size of the plot title
axis.title.x = element_text(size = 18), # Adjust the size of the x-axis title
axis.title.y = element_text(size = 18), # Adjust the size of the y-axis title
axis.text.x = element_text(size = 16), # Adjust the size of the x-axis text
axis.text.y = element_text(size = 16),
legend.title = element_text(size = 16), # Adjust font size of legend title
legend.text = element_text(size = 14)) +  # Adjust the size of the y-axis text
theme(axis.title.x = element_blank())
# Show the plot
DO_magnitude_box
# Save the plot as a PNG
ggsave("DO_magnitude_box.png", plot = DO_magnitude_box, width = 750*4, height = 600*4, units = "px")
# Load ggpattern
library(ggpattern)
DO_magnitude_box <- ggplot(data, aes(x = Season, y = DO_Magnitude, fill = Site, pattern = Site)) +
geom_boxplot_pattern(aes(pattern_fill = Site, pattern = Site),
position = position_dodge(0.8), color = "black",
pattern_density = 0.1, pattern_spacing = 0.05) +  # Boxplot with pattern dodging
geom_dotplot(binaxis = 'y', stackdir = 'center', binwidth = 0.1,
position = position_dodge(0.8)) +  # Dotplot with dodging
labs(y = "DO Amplitude (mg L-1)", fill = "Site", pattern = "Pattern") +  # Title for the legend
scale_fill_manual(values = c("Site1" = "#4DADCF", "Site2" = "coral1")) +  # Colors for Site1 and Site2
scale_pattern_manual(values = c("Site1" = "stripe", "Site2" = "none")) +  # Pattern for Site1, none for Site2
scale_pattern_fill_manual(values = c("Site1" = "#4DADCF", "Site2" = "coral1")) +  # Fill colors for pattern
theme_bw() +
theme(plot.title = element_text(size = 20),   # Adjust the size of the plot title
axis.title.x = element_text(size = 18), # Adjust the size of the x-axis title
axis.title.y = element_text(size = 18), # Adjust the size of the y-axis title
axis.text.x = element_text(size = 16),  # Adjust the size of the x-axis text
axis.text.y = element_text(size = 16),
legend.title = element_text(size = 16), # Adjust font size of legend title
legend.text = element_text(size = 14)) +  # Adjust font size of legend text
theme(axis.title.x = element_blank())  # Remove x-axis title
# Show the plot
DO_magnitude_box
# Save the plot with patterns using the cairo device to ensure pattern rendering
ggsave("DO_magnitude_box.png", plot = DO_magnitude_box, width = 750*4, height = 600*4, units = "px", device = "png", type = "cairo")
# Load necessary library
library(ggpattern)
library(dplyr)
library(tidyr)
# Reshape the data to long format
data_long <- data %>%
pivot_longer(cols = c(DO_Magnitude, Max_DO, Min_DO),
names_to = "DO_Type",
values_to = "DO_Value")
# Plot with facets for each DO type
DO_boxplot <- ggplot(data_long, aes(x = Season, y = DO_Value, fill = Site, pattern = Site)) +
geom_boxplot_pattern(aes(pattern_fill = Site, pattern = Site),
position = position_dodge(0.8), color = "black",
pattern_density = 0.1, pattern_spacing = 0.05) +  # Boxplot with pattern dodging
geom_dotplot(binaxis = 'y', stackdir = 'center', binwidth = 0.1,
position = position_dodge(0.8)) +  # Dotplot with dodging
labs(y = "DO Value (mg L-1)", fill = "Site", pattern = "Pattern") +  # Title for the legend
scale_fill_manual(values = c("Site1" = "#4DADCF", "Site2" = "coral1")) +  # Colors for Site1 and Site2
scale_pattern_manual(values = c("Site1" = "stripe", "Site2" = "none")) +  # Pattern for Site1, none for Site2
scale_pattern_fill_manual(values = c("Site1" = "#4DADCF", "Site2" = "coral1")) +  # Fill colors for pattern
facet_wrap(~DO_Type, scales = "free_y") +  # Facet for each DO type
theme_bw() +
theme(plot.title = element_text(size = 20),   # Adjust the size of the plot title
axis.title.x = element_text(size = 18), # Adjust the size of the x-axis title
axis.title.y = element_text(size = 18), # Adjust the size of the y-axis title
axis.text.x = element_text(size = 16),  # Adjust the size of the x-axis text
axis.text.y = element_text(size = 16),
legend.title = element_text(size = 16), # Adjust font size of legend title
legend.text = element_text(size = 14),
axis.title.x = element_blank())  # Remove x-axis title
# Load necessary library
library(ggpattern)
library(dplyr)
library(tidyr)
# Reshape the data to long format
data_long <- data %>%
pivot_longer(cols = c(DO_Magnitude, Max_DO, Min_DO),
names_to = "DO_Type",
values_to = "DO_Value")
# Plot with facets for each DO type
DO_boxplot <- ggplot(data_long, aes(x = Season, y = DO_Value, fill = Site, pattern = Site)) +
geom_boxplot_pattern(aes(pattern_fill = Site, pattern = Site),
position = position_dodge(0.8), color = "black",
pattern_density = 0.1, pattern_spacing = 0.05) +  # Boxplot with pattern dodging
geom_dotplot(binaxis = 'y', stackdir = 'center', binwidth = 0.1,
position = position_dodge(0.8)) +  # Dotplot with dodging
labs(y = "DO Value (mg L-1)", fill = "Site", pattern = "Pattern") +  # Title for the legend
scale_fill_manual(values = c("Site1" = "#4DADCF", "Site2" = "coral1")) +  # Colors for Site1 and Site2
scale_pattern_manual(values = c("Site1" = "stripe", "Site2" = "none")) +  # Pattern for Site1, none for Site2
scale_pattern_fill_manual(values = c("Site1" = "#4DADCF", "Site2" = "coral1")) +  # Fill colors for pattern
facet_wrap(~DO_Type, scales = "free_y") +  # Facet for each DO type
theme_bw() +
theme(plot.title = element_text(size = 20),    # Adjust the size of the plot title
axis.title.x = element_blank(),          # Remove x-axis title
axis.title.y = element_text(size = 18),  # Adjust the size of the y-axis title
axis.text.x = element_text(size = 16),   # Adjust the size of the x-axis text
axis.text.y = element_text(size = 16),
legend.title = element_text(size = 16),  # Adjust font size of legend title
legend.text = element_text(size = 14))   # Adjust font size of legend text
# Show the plot
DO_boxplot
# Save the plot with patterns using the cairo device to ensure pattern rendering
ggsave("DO_magnitude_box.png", plot = DO_boxplot, width = 750*4, height = 600*4, units = "px", device = "png", type = "cairo")
# Load necessary library
library(ggpattern)
library(dplyr)
library(tidyr)
# Reshape the data to long format
data_long <- data %>%
pivot_longer(cols = c(DO_Magnitude, Max_DO, Min_DO),
names_to = "DO_Type",
values_to = "DO_Value")
# Plot with facets for each DO type
DO_boxplot <- ggplot(data_long, aes(x = Season, y = DO_Value, fill = Site, pattern = Site)) +
geom_boxplot_pattern(aes(pattern_fill = Site, pattern = Site),
position = position_dodge(0.8), color = "black",
pattern_density = 0.1, pattern_spacing = 0.05) +  # Boxplot with pattern dodging
geom_dotplot(binaxis = 'y', stackdir = 'center', binwidth = 0.1,
position = position_dodge(0.8)) +  # Dotplot with dodging
labs(y = "DO Value (mg L-1)", fill = "Site", pattern = "Pattern") +  # Title for the legend
scale_fill_manual(values = c("Site1" = "#4DADCF", "Site2" = "coral1")) +  # Colors for Site1 and Site2
scale_pattern_manual(values = c("Site1" = "stripe", "Site2" = "none")) +  # Pattern for Site1, none for Site2
scale_pattern_fill_manual(values = c("Site1" = "#4DADCF", "Site2" = "coral1")) +  # Fill colors for pattern
facet_wrap(~DO_Type, scales = "free_y", nrow = 3) +  # Facet for each DO type
theme_bw() +
theme(plot.title = element_text(size = 20),    # Adjust the size of the plot title
axis.title.x = element_blank(),          # Remove x-axis title
axis.title.y = element_text(size = 18),  # Adjust the size of the y-axis title
axis.text.x = element_text(size = 16),   # Adjust the size of the x-axis text
axis.text.y = element_text(size = 16),
legend.title = element_text(size = 16),  # Adjust font size of legend title
legend.text = element_text(size = 14))   # Adjust font size of legend text
# Show the plot
DO_boxplot
# Save the plot with patterns using the cairo device to ensure pattern rendering
ggsave("DO_magnitude_box.png", plot = DO_boxplot, width = 750*4, height = 600*4, units = "px", device = "png", type = "cairo")
# Load necessary library
library(ggpattern)
library(dplyr)
library(tidyr)
# Reshape the data to long format
data_long <- data %>%
pivot_longer(cols = c(DO_Magnitude, Max_DO, Min_DO),
names_to = "DO_Type",
values_to = "DO_Value")
# Define custom labels for the facets
custom_labels <- as_labeller(c("DO_Magnitude" = "DO_Amplitude",
"Max_DO" = "Max DO",
"Min_DO" = "Min DO"))
# Plot with facets for each DO type
DO_boxplot <- ggplot(data_long, aes(x = Season, y = DO_Value, fill = Site, pattern = Site)) +
geom_boxplot_pattern(aes(pattern_fill = Site, pattern = Site),
position = position_dodge(0.8), color = "black",
pattern_density = 0.1, pattern_spacing = 0.05) +  # Boxplot with pattern dodging
geom_dotplot(binaxis = 'y', stackdir = 'center', binwidth = 0.1,
position = position_dodge(0.8)) +  # Dotplot with dodging
labs(y = "DO Value (mg L-1)", fill = "Site", pattern = "Pattern") +  # Title for the legend
scale_fill_manual(values = c("Site1" = "#4DADCF", "Site2" = "coral1")) +  # Colors for Site1 and Site2
scale_pattern_manual(values = c("Site1" = "stripe", "Site2" = "none")) +  # Pattern for Site1, none for Site2
scale_pattern_fill_manual(values = c("Site1" = "#4DADCF", "Site2" = "coral1")) +  # Fill colors for pattern
facet_wrap(~DO_Type, scales = "free_y", nrow = 3, labeller = custom_labels) +  # Facet for each DO type
theme_bw() +
theme(plot.title = element_text(size = 20),    # Adjust the size of the plot title
axis.title.x = element_blank(),          # Remove x-axis title
axis.title.y = element_text(size = 18),  # Adjust the size of the y-axis title
axis.text.x = element_text(size = 16),   # Adjust the size of the x-axis text
axis.text.y = element_text(size = 16),
legend.title = element_text(size = 16),  # Adjust font size of legend title
legend.text = element_text(size = 14))   # Adjust font size of legend text
# Show the plot
DO_boxplot
# Save the plot with patterns using the cairo device to ensure pattern rendering
ggsave("DO_magnitude_box.png", plot = DO_boxplot, width = 750*4, height = 600*4, units = "px", device = "png", type = "cairo")
# Load necessary library
library(ggpattern)
library(dplyr)
library(tidyr)
# Reshape the data to long format
data_long <- data %>%
pivot_longer(cols = c(DO_Magnitude, Max_DO, Min_DO),
names_to = "DO_Type",
values_to = "DO_Value")
# Define custom labels for the facets
custom_labels <- as_labeller(c("DO_Magnitude" = "DO Amplitude",
"Max_DO" = "Max DO",
"Min_DO" = "Min DO"))
# Plot with facets for each DO type
DO_boxplot <- ggplot(data_long, aes(x = Season, y = DO_Value, fill = Site, pattern = Site)) +
geom_boxplot_pattern(aes(pattern_fill = Site, pattern = Site),
position = position_dodge(0.8), color = "black",
pattern_density = 0.1, pattern_spacing = 0.05) +  # Boxplot with pattern dodging
geom_dotplot(binaxis = 'y', stackdir = 'center', binwidth = 0.1,
position = position_dodge(0.8)) +  # Dotplot with dodging
labs(y = "DO Value (mg L-1)", fill = "Site", pattern = "Pattern") +  # Title for the legend
scale_fill_manual(values = c("Site1" = "#4DADCF", "Site2" = "coral1")) +  # Colors for Site1 and Site2
scale_pattern_manual(values = c("Site1" = "stripe", "Site2" = "none")) +  # Pattern for Site1, none for Site2
scale_pattern_fill_manual(values = c("Site1" = "#4DADCF", "Site2" = "coral1")) +  # Fill colors for pattern
facet_wrap(~DO_Type, scales = "free_y", nrow = 3, labeller = custom_labels) +  # Facet for each DO type
theme_bw() +
theme(plot.title = element_text(size = 20),    # Adjust the size of the plot title
axis.title.x = element_blank(),          # Remove x-axis title
axis.title.y = element_text(size = 18),  # Adjust the size of the y-axis title
axis.text.x = element_text(size = 16),   # Adjust the size of the x-axis text
axis.text.y = element_text(size = 16),
legend.title = element_text(size = 16),  # Adjust font size of legend title
legend.text = element_text(size = 14))   # Adjust font size of legend text
# Show the plot
DO_boxplot
# Save the plot with patterns using the cairo device to ensure pattern rendering
ggsave("DO_magnitude_box.png", plot = DO_boxplot, width = 750*4, height = 600*4, units = "px", device = "png", type = "cairo")
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, skimr)
library(ggplot2)
library(lubridate)
library(corrplot)
library(dplyr)
setwd("C:/Users/DELL/Desktop/plot_update/Diurnal_variation")
library(readxl)
Sample <- read_excel("TimeSeriesSummary.xlsx")
Sample <- rename(Sample,
'Temperature_C' = TempC,
'K_d-1' = K.instant,
'GPP_mgO2L-1d-1' = GPP,
'ER_mgO2L-1d-1' = ER,
'NEP_mgO2L-1d-1' = NEP)
View(Sample)
# Time Series Plot for each measurement
InSitu <- Sample %>%
select(DateTime, Temperature_C:Nitrate) %>%
gather(variable, measurement, Temperature_C:Nitrate, factor_key=TRUE)
p <- ggplot(InSitu, aes(x=DateTime)) +
theme_linedraw() +
geom_line(aes(y = measurement), linewidth = 0.7,color = "#4DADCF") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
facet_wrap(~variable, scales = "free")
ggsave("diurnal_discrete.png", width = 750*4, height = 600*4, units = "px")
print(p)
# Correlation Heatmap
# Assuming your data frame 'data' only contains numeric columns and a date column
numeric_data <- Sample %>% select(Temperature_C:Nitrate)
# significant test
p_matrix = cor.mtest(numeric_data, conf.level = 0.95)
# Calculate the correlation matrix
cor_matrix <- cor(numeric_data, use = "pairwise.complete.obs", method = "spearman")
# Plot the correlation heatmap
corrplot(cor_matrix, method = 'circle', type = 'lower', p.mat = p_matrix$p,
order = "hclust", insig='blank', tl.col = 'black', tl.cex = 0.5,
cl.ratio = 0.1, tl.srt = 45, diag = FALSE)
# Save the heatmap plot as an image
png("discrete_correlation.png", width = 600*2, height = 600*2)
corrplot(cor_matrix, method = 'circle', type = 'lower', p.mat = p_matrix$p,
order = "hclust", insig = 'blank', tl.col = 'black', tl.cex = 2,
cl.cex = 2, cl.ratio = 0.2, tl.srt = 45, diag = FALSE)
dev.off()
Sample <- rename(Sample,
'Temperature_C' = TempC,
'K_d-1' = K.instant,
'GPP_mgO2L-1d-1' = GPP,
'ER_mgO2L-1d-1' = ER,
'NEP_mgO2L-1d-1' = NEP)
setwd("C:/Users/DELL/Desktop/plot_update/Diurnal_variation")
library(readxl)
Sample <- read_excel("WaterSampleTimeSeries.xlsx")
Sample <- rename(Sample,
'Temperature_C' = TempC,
'K_d-1' = K.instant,
'GPP_mgO2L-1d-1' = GPP,
'ER_mgO2L-1d-1' = ER,
'NEP_mgO2L-1d-1' = NEP)
setwd("C:/Users/DELL/Desktop/plot_update/Diurnal_variation")
library(readxl)
Sample <- read_excel("WaterSampleTimeSeries_copy.xlsx")
setwd("C:/Users/DELL/Desktop/plot_update/Diurnal_variation")
library(readxl)
Sample <- read_excel("WaterSampleTimeSeries_copy.xlsx")
setwd("C:/Users/DELL/Desktop/plot_update/Diurnal_variation")
library(readxl)
Sample <- read_excel("WaterSampleTimeSeries_copy.xlsx")
Sample <- rename(Sample,
'Temperature_C' = TempC,
'K_d-1' = K.instant,
'GPP_mgO2L-1d-1' = GPP,
'ER_mgO2L-1d-1' = ER,
'NEP_mgO2L-1d-1' = NEP)
setwd("C:/Users/DELL/Desktop/plot_update/Diurnal_variation")
library(readxl)
Sample <- read_excel("WaterSampleTimeSeries_copy.xlsx")
Sample <- rename(Sample,
'K_d-1' = K.instant,
'GPP_mgO2L-1d-1' = GPP,
'ER_mgO2L-1d-1' = ER,
'NEP_mgO2L-1d-1' = NEP)
View(Sample)
# Correlation Heatmap
# Assuming your data frame 'data' only contains numeric columns and a date column
numeric_data <- Sample %>% select(6:43)
# significant test
p_matrix = cor.mtest(numeric_data, conf.level = 0.95)
# Calculate the correlation matrix
cor_matrix <- cor(numeric_data, use = "pairwise.complete.obs", method = "spearman")
# Plot the correlation heatmap
corrplot(cor_matrix, method = 'circle', type = 'lower', p.mat = p_matrix$p,
order = "hclust", insig='blank', tl.col = 'black', tl.cex = 0.5,
cl.ratio = 0.1, tl.srt = 45, diag = FALSE)
# Save the heatmap plot as an image
png("discrete_correlation.png", width = 600*2, height = 600*2)
corrplot(cor_matrix, method = 'circle', type = 'lower', p.mat = p_matrix$p,
order = "hclust", insig = 'blank', tl.col = 'black', tl.cex = 2,
cl.cex = 2, cl.ratio = 0.2, tl.srt = 45, diag = FALSE)
dev.off()
# Ensure the p-value matrix is created with the correct dimensions
cor.mtest <- function(mat, conf.level = 0.95) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], conf.level = conf.level)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
return(p.mat)
}
# Calculate the p-value matrix and correlation matrix
p_matrix <- cor.mtest(numeric_data, conf.level = 0.95)
p_matrix <- as.matrix(p_matrix)  # Ensure it's a matrix
# Check the dimensions of the correlation and p-value matrices
dim(cor_matrix)
dim(p_matrix)
# Define significance level
significance_level <- 0.05
# Create R table and bold significant values
R_table <- cor_matrix
R_table_formatted <- as.data.frame(R_table)
# Ensure the formatting matches the matrix dimensions
R_table_formatted[] <- lapply(seq_len(ncol(R_table)), function(i) {
ifelse(p_matrix[, i] < significance_level, paste0("*", sprintf("%.2f", R_table[, i])), sprintf("%.2f", R_table[, i]))
})
# Create a p-values table formatted to 3 decimal places
p_table <- as.data.frame(p_matrix)
p_table[] <- lapply(p_table, function(x) sprintf("%.3f", x))
library(kableExtra)
# Display the R table with bolded significant values
kable(R_table_formatted, format = "html", escape = FALSE, caption = "R Values (Bold Significant)") %>%
kable_styling("striped", full_width = F)
# Display the p-values table
kable(p_table, format = "html", caption = "P Values") %>%
kable_styling("striped", full_width = F)
# Save the R values table to a CSV file
write.csv(R_table_formatted, "R_values_table.csv", row.names = TRUE)
# Save the p-values table to a CSV file
write.csv(p_table, "p_values_table.csv", row.names = TRUE)
